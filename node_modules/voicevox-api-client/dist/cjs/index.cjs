var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  Client: () => Client
});
module.exports = __toCommonJS(src_exports);

// src/client/other.ts
var OtherClient = class {
  constructor(client) {
    this.client = client;
  }
  async margeWav(base64Array) {
    const res = await this.client.request("/connect_waves", {
      body: JSON.stringify(base64Array)
    });
    return res.arrayBuffer();
  }
  async getPreset() {
    const res = await this.client.request("/preset", {}, "GET");
    return await res.json();
  }
  async getVersion() {
    const res = await this.client.request("/version", {}, "GET");
    return await res.text();
  }
  async getSpeakers() {
    const res = await this.client.request("/speakers", {}, "GET");
    return await res.json();
  }
  async getSpeakerInfo(speaker_uuid) {
    const res = await this.client.request(`/speaker_info?speaker_uuid=${speaker_uuid}`, {}, "GET");
    return await res.json();
  }
};

// src/client/query.ts
var QueryClient = class {
  constructor(client) {
    this.client = client;
  }
  async createQuery(speaker, text) {
    const res = await this.client.request(`/audio_query?speaker=${speaker}&text=${encodeURIComponent(text)}`);
    return await res.json();
  }
  async createQueryWithPreset(preset, text) {
    const res = await this.client.request(`/audio_query_from_preset?preset_id=${preset}&text=${encodeURIComponent(text)}`);
    return await res.json();
  }
  async getAccentPhrases(speaker, text, is_kana) {
    const res = await this.client.request(`/accent_phrases?speaker=${speaker}&text=${encodeURIComponent(text)}?is_kana=${is_kana}`);
    return await res.json();
  }
  async getPitchAndPhonemeLength(speaker, moras, accent, pause_mora) {
    const res = await this.client.request(`/mora_data?speaker=${speaker}`, {
      body: JSON.stringify({
        moras,
        accent,
        pause_mora
      })
    });
    return await res.json();
  }
  async getPhonemeLength(speaker, moras, accent, pause_mora) {
    const res = await this.client.request(`/mora_length?speaker=${speaker}`, {
      body: JSON.stringify({
        moras,
        accent,
        pause_mora
      })
    });
    return await res.json();
  }
  async getPitch(speaker, moras, accent, pause_mora) {
    const res = await this.client.request(`/mora_pitch?speaker=${speaker}`, {
      body: JSON.stringify({
        moras,
        accent,
        pause_mora
      })
    });
    return await res.json();
  }
};

// src/client/voice.ts
var VoiceClient = class {
  constructor(client) {
    this.client = client;
  }
  async createVoice(speaker, query) {
    const res = await this.client.request(`/synthesis?speaker=${speaker}`, {
      body: JSON.stringify(query)
    });
    return await res.arrayBuffer();
  }
  async createVoiceCancellable(speaker, query) {
    const res = await this.client.request(`/cancellable_synthesis?speaker=${speaker}`, {
      body: JSON.stringify(query)
    });
    return res;
  }
  async createVoiceMulti(speaker, queries) {
    const res = await this.client.request(`/multi_synthesis?speaker=${speaker}`, {
      body: JSON.stringify(queries)
    });
    return await res.arrayBuffer();
  }
  async createVoiceMorphing(base_speaker, target_speaker, morph_rate, query) {
    const res = await this.client.request(`/synthesis_morphing?base_speaker=${base_speaker}&target_speaker=${target_speaker}&morph_rate=${morph_rate}`, {
      body: JSON.stringify(query)
    });
    return await res.arrayBuffer();
  }
};

// src/client/index.ts
var Client = class {
  url;
  query = new QueryClient(this);
  voice = new VoiceClient(this);
  other = new OtherClient(this);
  constructor(url) {
    this.url = new URL(url);
  }
  async loadFetcher() {
    if (typeof document === "undefined") {
      return (await import("node-fetch")).default;
    } else {
      return window.fetch;
    }
  }
  async request(pathname, init, method = "POST") {
    const url = new URL(pathname, this.url);
    const fetch = await this.loadFetcher();
    const res = await fetch(url.href, {
      method,
      headers: {
        "Content-Type": "application/json"
      },
      ...init
    });
    if (res.status !== 200) {
      throw new Error(`${res.status} ${res.statusText}`);
    }
    return res;
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Client
});
