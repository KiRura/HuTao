// src/client/other.ts
var OtherClient = class {
  constructor(client) {
    this.client = client;
  }
  async margeWav(base64Array) {
    const res = await this.client.request("/connect_waves", {
      body: JSON.stringify(base64Array)
    });
    return res.arrayBuffer();
  }
  async getPreset() {
    const res = await this.client.request("/preset", {}, "GET");
    return await res.json();
  }
  async getVersion() {
    const res = await this.client.request("/version", {}, "GET");
    return await res.text();
  }
  async getSpeakers() {
    const res = await this.client.request("/speakers", {}, "GET");
    return await res.json();
  }
  async getSpeakerInfo(speaker_uuid) {
    const res = await this.client.request(`/speaker_info?speaker_uuid=${speaker_uuid}`, {}, "GET");
    return await res.json();
  }
};

// src/client/query.ts
var QueryClient = class {
  constructor(client) {
    this.client = client;
  }
  async createQuery(speaker, text) {
    const res = await this.client.request(`/audio_query?speaker=${speaker}&text=${encodeURIComponent(text)}`);
    return await res.json();
  }
  async createQueryWithPreset(preset, text) {
    const res = await this.client.request(`/audio_query_from_preset?preset_id=${preset}&text=${encodeURIComponent(text)}`);
    return await res.json();
  }
  async getAccentPhrases(speaker, text, is_kana) {
    const res = await this.client.request(`/accent_phrases?speaker=${speaker}&text=${encodeURIComponent(text)}?is_kana=${is_kana}`);
    return await res.json();
  }
  async getPitchAndPhonemeLength(speaker, moras, accent, pause_mora) {
    const res = await this.client.request(`/mora_data?speaker=${speaker}`, {
      body: JSON.stringify({
        moras,
        accent,
        pause_mora
      })
    });
    return await res.json();
  }
  async getPhonemeLength(speaker, moras, accent, pause_mora) {
    const res = await this.client.request(`/mora_length?speaker=${speaker}`, {
      body: JSON.stringify({
        moras,
        accent,
        pause_mora
      })
    });
    return await res.json();
  }
  async getPitch(speaker, moras, accent, pause_mora) {
    const res = await this.client.request(`/mora_pitch?speaker=${speaker}`, {
      body: JSON.stringify({
        moras,
        accent,
        pause_mora
      })
    });
    return await res.json();
  }
};

// src/client/voice.ts
var VoiceClient = class {
  constructor(client) {
    this.client = client;
  }
  async createVoice(speaker, query) {
    const res = await this.client.request(`/synthesis?speaker=${speaker}`, {
      body: JSON.stringify(query)
    });
    return await res.arrayBuffer();
  }
  async createVoiceCancellable(speaker, query) {
    const res = await this.client.request(`/cancellable_synthesis?speaker=${speaker}`, {
      body: JSON.stringify(query)
    });
    return res;
  }
  async createVoiceMulti(speaker, queries) {
    const res = await this.client.request(`/multi_synthesis?speaker=${speaker}`, {
      body: JSON.stringify(queries)
    });
    return await res.arrayBuffer();
  }
  async createVoiceMorphing(base_speaker, target_speaker, morph_rate, query) {
    const res = await this.client.request(`/synthesis_morphing?base_speaker=${base_speaker}&target_speaker=${target_speaker}&morph_rate=${morph_rate}`, {
      body: JSON.stringify(query)
    });
    return await res.arrayBuffer();
  }
};

// src/client/index.ts
var Client = class {
  url;
  query = new QueryClient(this);
  voice = new VoiceClient(this);
  other = new OtherClient(this);
  constructor(url) {
    this.url = new URL(url);
  }
  async loadFetcher() {
    if (typeof document === "undefined") {
      return (await import("node-fetch")).default;
    } else {
      return window.fetch;
    }
  }
  async request(pathname, init, method = "POST") {
    const url = new URL(pathname, this.url);
    const fetch = await this.loadFetcher();
    const res = await fetch(url.href, {
      method,
      headers: {
        "Content-Type": "application/json"
      },
      ...init
    });
    if (res.status !== 200) {
      throw new Error(`${res.status} ${res.statusText}`);
    }
    return res;
  }
};
export {
  Client
};
